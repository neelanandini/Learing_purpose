=============================================================================
List of generated methods in project: Boson_VCU_MPC5775B_Z7_0

This text description is generated by Processor Expert. Do not modify it.
=============================================================================

Module "pin_mux"   (component PinSettings)
   - pin_mux_PINS_DRV_Init -This function configures the pins with the options provided in the provided structure
   - pin_mux_PINS_DRV_SetPullSel -This function configures the internal resistor
   - pin_mux_PINS_DRV_ConfigOutputMux -This function configures the output muxing and gate
   - pin_mux_PINS_DRV_ConfigInputMux -This function configures the input muxing and gate
   - pin_mux_PINS_DRV_ConfigDigitalFilterLength -This function configures the digital filter length specifies the number system 
                clocks
   - pin_mux_PINS_DRV_SetExInt -This function configures the external interrupt
   - pin_mux_PINS_DRV_ClearPinExIntFlag -This function clears the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_GetPinExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_ClearExIntFlag -This function clears the entire external interrupt status flag
   - pin_mux_PINS_DRV_GetExIntFlag -This function gets the individual pin external interrupt status flag
   - pin_mux_PINS_DRV_ClearOverrunIntFlag -This function clears the entire overrun interrupt status flag
   - pin_mux_PINS_DRV_GetOverrunIntFlag -This function reads the entire overrun interrupt status flag
   - pin_mux_PINS_DRV_GetFilterInputValue -This function gets the entire filter input values of IRQ and NMI pins
   - pin_mux_PINS_DRV_WritePin -This function writes the given pin from a port, with the given value ('0' represents LOW, '1' 
                represents HIGH)
   - pin_mux_PINS_DRV_WritePins -This function writes all pins configured as output with the values given in the parameter pins.
                '0' represents LOW, '1' represents HIGH
   - pin_mux_PINS_DRV_GetPinsOutput -This function returns the current output that is written to a port. Only pins that are 
                configured as output will have meaningful values
   - pin_mux_PINS_DRV_SetPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                value of 'set' (HIGH). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ClearPins -This function configures output pins listed in parameter pins (bits that are '1') to have a 
                'cleared' value (LOW). Pins corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_TogglePins -This function toggles output pins listed in parameter pins (bits that are '1'). Pins 
                corresponding to '0' will be unaffected
   - pin_mux_PINS_DRV_ReadPins -This function returns the current input values from a port. Only pins configured as input will 
                have meaningful values

Module "clockMan1" (component clock_manager)
   - clockMan1_CLOCK_DRV_Init -Initialize clocking modules
   - clockMan1_CLOCK_DRV_GetFreq -Return frequency.

Module "intMan1"   (component interrupt_manager)
   - intMan1_INT_SYS_InstallHandler -Installs an interrupt handler routine for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQ -Enables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_DisableIRQ -Disables an interrupt for a given IRQ number.
   - intMan1_INT_SYS_EnableIRQGlobal -Enables system interrupt.
   - intMan1_INT_SYS_DisableIRQGlobal -Disable system interrupt.
   - intMan1_INT_SYS_SetPriority -Set Interrupt Priority.
   - intMan1_INT_SYS_GetPriority -Get Interrupt Priority.
   - intMan1_INT_SYS_SetSoftwareIRQRequest -Set software interrupt request.
   - intMan1_INT_SYS_ClearSoftwareIRQRequest -Clear software interrupt request.
   - intMan1_INT_SYS_EnableIRQ_MC -Enables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_GetCoresForIRQ -Gets the cores on which an interrupt for the specified IRQ number is enabled.
   - intMan1_INT_SYS_DisableIRQ_MC -Disables an interrupt for a given IRQ number, on the given cores.
   - intMan1_INT_SYS_DisableIRQ_MC_All -Disables an interrupt for a given IRQ number, on all cores.

Module "ADC_THROTTLE" (component adc_pal)
   - ADC_THROTTLE_ADC_Init -This function initializes the ADC PAL instance, including the other platform specific HW units used 
                together with ADC. Notifications are default enabled after init.
   - ADC_THROTTLE_ADC_Deinit -This function resets the ADC PAL instance, including the other platform specific HW units used 
                together with ADC, if there are no active conversions.
   - ADC_THROTTLE_ADC_EnableHardwareTrigger -Enables the selected HW trigger for a conversion group, if the conversion group 
                has support for HW trigger. The function will return an error code if there is a conversion group already 
                active. If the function succeeds, the conversion group will be triggered for execution when the selected HW 
                trigger occurs.
   - ADC_THROTTLE_ADC_DisableHardwareTrigger -This function disables HW trigger for a configured conversion group and also may 
                stop its execution (depending on platform), if called when a conversion group is executing. If stopping is 
                supported, the execution shall be stopped according to device specific procedures. The function shall wait for 
                the procedures to complete within the given timeout interval and return error code if they do not succeed.
   - ADC_THROTTLE_ADC_StartGroupConversion -This function starts execution of a selected ADC conversion group, if there is no 
                other conversion group active. Conversion groups started by ADC_StartGroupConversion shall not be preempted by 
                HW triggered conversion groups.
   - ADC_THROTTLE_ADC_StopGroupConversion -This function stops the execution of a SW triggered conversion group. The execution 
                shall be stopped according to device specific procedures. The function shall wait for the procedures to 
                complete within the given timeout interval and return error code if they do not succeed.             For 
                ADC_SAR_CTU type and ADC_SAR_BCTU a conversion already started for execution cannot be stopped, so the function 
                shall wait until it finishes or timeout occurs.
   - ADC_THROTTLE_ADC_EnableNotification -This function enables the notification callback for a selected group of ADC 
                conversions.
   - ADC_THROTTLE_ADC_DisableNotification -This function disables the notification callback for a selected group of ADC 
                conversions.

Module "osif1"     (component osif)
   - osif1_OSIF_TimeDelay -Delays execution for a number of milliseconds.
   - osif1_OSIF_MutexLock -Waits for a mutex and locks it.
   - osif1_OSIF_MutexUnlock -Unlocks a previously locked mutex.
   - osif1_OSIF_MutexCreate -Create an unlocked mutex.
   - osif1_OSIF_MutexDestroy -Destroys a previously created mutex.
   - osif1_OSIF_SemaWait -Decrement a semaphore with timeout.
   - osif1_OSIF_SemaPost -Increment a semaphore.
   - osif1_OSIF_SemaCreate -Creates a semaphore with a given value.
   - osif1_OSIF_SemaDestroy -Destroys a previously created semaphore.
   - osif1_OSIF_GetMilliseconds -Returns the number of miliseconds elapsed since starting the internal timer or starting the 
                scheduler.

Module "dmaController1" (component edma)
   - dmaController1_EDMA_DRV_Init -Initializes the eDMA module.
   - dmaController1_EDMA_DRV_Deinit -Shuts down the eDMA module.
   - dmaController1_EDMA_DRV_ChannelInit -Initializes a eDMA virtualChannel.
   - dmaController1_EDMA_DRV_ReleaseChannel -Releases an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StartChannel -Starts an eDMA virtualChannel.
   - dmaController1_EDMA_DRV_StopChannel -Stops the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_InstallCallback -Registers the callback function and the parameter for eDMA virtualChannel.
   - dmaController1_EDMA_DRV_GetChannelStatus -Gets the eDMA virtualChannel status.
   - dmaController1_EDMA_DRV_PushConfigToReg -Copies the virtualChannel configuration to the TCD registers.
   - dmaController1_EDMA_DRV_PushConfigToSTCD -Copies the virtualChannel configuration to the software TCD structure.
   - dmaController1_EDMA_DRV_ConfigSingleBlockTransfer -Configures a simple single block data transfer with DMA. This function 
                configures the descriptor for a single block transfer.
   - dmaController1_EDMA_DRV_ConfigLoopTransfer -Configures the DMA transfer in loop mode.
   - dmaController1_EDMA_DRV_ConfigScatterGatherTransfer -Configures the DMA transfer in a scatter-gather mode.
   - dmaController1_EDMA_DRV_ConfigMultiBlockTransfer -Configures a multiple block data transfer with DMA. This function 
                configures the descriptor for a multi block transfer.
   - dmaController1_EDMA_DRV_CancelTransfer -Cancels the remaining data transfer.
   - dmaController1_EDMA_DRV_SetChannelRequestAndTrigger -Configures the DMA request and periodic trigger for the eDMA channel.
   - dmaController1_EDMA_DRV_ClearTCD -Clears all registers to 0 for the virtualChannel's TCD.
   - dmaController1_EDMA_DRV_SetSrcAddr -Configures the source address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcOffset -Configures the source address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetSrcReadChunkSize -Configures the source data chunk size (transferred in a read sequence).
   - dmaController1_EDMA_DRV_SetDestAddr -Configures the destination address for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestOffset -Configures the destination address signed offset for the eDMA virtualChannel.
   - dmaController1_EDMA_DRV_SetDestWriteChunkSize -Configures the destination data chunk size (transferred in a write sequence)
                .
   - dmaController1_EDMA_DRV_SetMinorLoopBlockSize -Configures the number of bytes to be transferred in each service request of 
                the virtualChannel.
   - dmaController1_EDMA_DRV_SetMajorLoopIterationCount -Configures the number of major loop iterations.
   - dmaController1_EDMA_DRV_GetRemainingMajorIterationsCount -Returns the remaining major loop iteration count.
   - dmaController1_EDMA_DRV_SetScatterGatherLink -Configures the memory address of the next TCD, in scatter/gather mode.
   - dmaController1_EDMA_DRV_DisableRequestsOnTransferComplete -Disables/Enables the DMA request after the major loop completes 
                for the TCD.
   - dmaController1_EDMA_DRV_SetSrcLastAddrAdjustment -Configures the source address last adjustment.
   - dmaController1_EDMA_DRV_SetDestLastAddrAdjustment -Configures the destination address last adjustment.
   - dmaController1_EDMA_DRV_ConfigureInterrupt -Disables/Enables the virtualChannel interrupt requests.
   - dmaController1_EDMA_DRV_TriggerSwRequest -Triggers a sw request for the current virtualChannel.

Module "FlexCANA"  (component flexcan)
   - FlexCANA_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - FlexCANA_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - FlexCANA_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - FlexCANA_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - FlexCANA_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - FlexCANA_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - FlexCANA_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - FlexCANA_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - FlexCANA_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - FlexCANA_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - FlexCANA_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - FlexCANA_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - FlexCANA_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - FlexCANA_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - FlexCANA_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - FlexCANA_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - FlexCANA_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - FlexCANA_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - FlexCANA_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - FlexCANA_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - FlexCANA_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - FlexCANA_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - FlexCANA_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - FlexCANA_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - FlexCANA_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - FlexCANA_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance

Module "MCAN0"     (component mcan)
   - MCAN0_MCAN_DRV_Init -Initializes the MCAN peripheral.
   - MCAN0_MCAN_DRV_ConfigTxMb -MCAN transmit message buffer field configuration.
   - MCAN0_MCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - MCAN0_MCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - MCAN0_MCAN_DRV_ConfigRxMb -MCAN receive message buffer field configuration.
   - MCAN0_MCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - MCAN0_MCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - MCAN0_MCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - MCAN0_MCAN_DRV_InstallErrorCallback -Installs a Error callback function for the IRQ handler.
   - MCAN0_MCAN_DRV_Deinit -Shuts down a MCAN instance.
   - MCAN0_MCAN_DRV_ConfigRxFifo -Configure the FiltersID for the RxFIFOs.
   - MCAN0_MCAN_DRV_GetTransferStatus -Returns whether the previous MCAN transfer has finished.
   - MCAN0_MCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - MCAN0_MCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - MCAN0_MCAN_DRV_SetNominalBitrate -Sets the MCAN nominal bit rate for standard frames.
   - MCAN0_MCAN_DRV_SetDataBitrate -Sets the MCAN data bit rate for extended FD frames.
   - MCAN0_MCAN_DRV_AbortTransfer -Abort a transfer.
   - MCAN0_MCAN_DRV_SetRxFifoFilterMask -This function sets a filter Mask for a specific filter. Note ! This filter mask can be 
                applied only for classical type filters and for filters that are not part of an Rx Individual Buffer process.
   - MCAN0_MCAN_DRV_SetGlobalFilterConfig -This function sets Global filter Configuration behavior Store in RxFIFO or Reject 
                nonAccepted frames, and automatic rejection of remote frames. Note ! By Default the driver will set to reject 
                all non match frames and to pass on filters all remote frames.
   - MCAN0_MCAN_DRV_GetDefaultConfig -Gets the default configuration structure.
   - MCAN0_MCAN_DRV_GetErrorStatus -Returns reported error conditions.
   - MCAN0_MCAN_DRV_SetTDCOffset -Enables/Disables the Transceiver Delay Compensation feature and sets the Transceiver Delay 
                Compensation Offset (offset value to be added to the measured transceiver's loop delay in order to define the 
                position of the delayed comparison point when bit rate switching is active).
   - MCAN0_MCAN_DRV_GetBitrate -Gets the MCAN bit rate for standard frames or the arbitration phase of FD frames.
   - MCAN0_MCAN_DRV_GetBitrateFD -Gets the MCAN bit rate for the data phase of FD frames (BRS enabled).

Module "FlexCANB"  (component flexcan)
   - FlexCANB_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - FlexCANB_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - FlexCANB_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - FlexCANB_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - FlexCANB_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - FlexCANB_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - FlexCANB_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - FlexCANB_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - FlexCANB_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - FlexCANB_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - FlexCANB_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - FlexCANB_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - FlexCANB_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - FlexCANB_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - FlexCANB_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - FlexCANB_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - FlexCANB_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - FlexCANB_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - FlexCANB_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - FlexCANB_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - FlexCANB_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - FlexCANB_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - FlexCANB_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - FlexCANB_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - FlexCANB_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - FlexCANB_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance

Module "FlexCANC"  (component flexcan)
   - FlexCANC_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - FlexCANC_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - FlexCANC_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - FlexCANC_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - FlexCANC_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - FlexCANC_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - FlexCANC_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - FlexCANC_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - FlexCANC_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - FlexCANC_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - FlexCANC_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - FlexCANC_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - FlexCANC_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - FlexCANC_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - FlexCANC_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - FlexCANC_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - FlexCANC_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - FlexCANC_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - FlexCANC_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - FlexCANC_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - FlexCANC_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - FlexCANC_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - FlexCANC_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - FlexCANC_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - FlexCANC_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - FlexCANC_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance

Module "FlexCAND"  (component flexcan)
   - FlexCAND_FLEXCAN_DRV_SetBitrate -Sets the FlexCAN bit rate.
   - FlexCAND_FLEXCAN_DRV_GetBitrate -Gets the FlexCAN bit rate.
   - FlexCAND_FLEXCAN_DRV_SetRxMaskType -Sets the RX masking type.
   - FlexCAND_FLEXCAN_DRV_SetRxFifoGlobalMask -Sets the FlexCAN RX FIFO global standard or extended mask.
   - FlexCAND_FLEXCAN_DRV_SetRxMbGlobalMask -Sets the FlexCAN RX MB global standard or extended mask.
   - FlexCAND_FLEXCAN_DRV_SetRxIndividualMask -Sets the FlexCAN RX individual standard or extended mask.
   - FlexCAND_FLEXCAN_DRV_Init -Initializes the FlexCAN peripheral.
   - FlexCAND_FLEXCAN_DRV_Deinit -Shuts down a FlexCAN instance.
   - FlexCAND_FLEXCAN_DRV_ConfigTxMb -FlexCAN transmit message buffer field configuration.
   - FlexCAND_FLEXCAN_DRV_ConfigRemoteResponseMb -Configures a transmit message buffer for remote frame response.
   - FlexCAND_FLEXCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - FlexCAND_FLEXCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - FlexCAND_FLEXCAN_DRV_AbortTransfer -Ends a non-blocking FlexCAN transfer early.
   - FlexCAND_FLEXCAN_DRV_ConfigRxMb -FlexCAN receive message buffer field configuration.
   - FlexCAND_FLEXCAN_DRV_ConfigRxFifo -FlexCAN RX FIFO field configuration.
   - FlexCAND_FLEXCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - FlexCAND_FLEXCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - FlexCAND_FLEXCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - FlexCAND_FLEXCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - FlexCAND_FLEXCAN_DRV_GetTransferStatus -Returns whether the previous FLEXCAN transfer has finished.
   - FlexCAND_FLEXCAN_DRV_InstallErrorCallback -Installs a callback function for the Error IRQ handler.
   - FlexCAND_FLEXCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - FlexCAND_FLEXCAN_DRV_GetDefaultConfig -Initializes the FlexCAN peripheral.
   - FlexCAND_FLEXCAN_DRV_SetRxMb14Mask -Sets the FlexCAN Rx MB 14 mask (standard or extended).
   - FlexCAND_FLEXCAN_DRV_SetRxMb15Mask -Sets the FlexCAN Rx MB 15 mask (standard or extended).
   - FlexCAND_FLEXCAN_DRV_GetErrorStatus -Reports the error status for CAN instance

Module "MCAN1"     (component mcan)
   - MCAN1_MCAN_DRV_Init -Initializes the MCAN peripheral.
   - MCAN1_MCAN_DRV_ConfigTxMb -MCAN transmit message buffer field configuration.
   - MCAN1_MCAN_DRV_Send -Sends a CAN frame using the specified message buffer.
   - MCAN1_MCAN_DRV_SendBlocking -Sends a CAN frame using the specified message buffer, in a blocking manner.
   - MCAN1_MCAN_DRV_ConfigRxMb -MCAN receive message buffer field configuration.
   - MCAN1_MCAN_DRV_Receive -Receives a CAN frame using the specified message buffer.
   - MCAN1_MCAN_DRV_ReceiveBlocking -Receives a CAN frame using the specified message buffer, in a blocking manner.
   - MCAN1_MCAN_DRV_InstallEventCallback -Installs a callback function for the IRQ handler.
   - MCAN1_MCAN_DRV_InstallErrorCallback -Installs a Error callback function for the IRQ handler.
   - MCAN1_MCAN_DRV_Deinit -Shuts down a MCAN instance.
   - MCAN1_MCAN_DRV_ConfigRxFifo -Configure the FiltersID for the RxFIFOs.
   - MCAN1_MCAN_DRV_GetTransferStatus -Returns whether the previous MCAN transfer has finished.
   - MCAN1_MCAN_DRV_RxFifo -Receives a CAN frame using the message FIFO.
   - MCAN1_MCAN_DRV_RxFifoBlocking -Receives a CAN frame using the message FIFO, in a blocking manner.
   - MCAN1_MCAN_DRV_SetNominalBitrate -Sets the MCAN nominal bit rate for standard frames.
   - MCAN1_MCAN_DRV_SetDataBitrate -Sets the MCAN data bit rate for extended FD frames.
   - MCAN1_MCAN_DRV_AbortTransfer -Abort a transfer.
   - MCAN1_MCAN_DRV_SetRxFifoFilterMask -This function sets a filter Mask for a specific filter. Note ! This filter mask can be 
                applied only for classical type filters and for filters that are not part of an Rx Individual Buffer process.
   - MCAN1_MCAN_DRV_SetGlobalFilterConfig -This function sets Global filter Configuration behavior Store in RxFIFO or Reject 
                nonAccepted frames, and automatic rejection of remote frames. Note ! By Default the driver will set to reject 
                all non match frames and to pass on filters all remote frames.
   - MCAN1_MCAN_DRV_GetDefaultConfig -Gets the default configuration structure.
   - MCAN1_MCAN_DRV_GetErrorStatus -Returns reported error conditions.
   - MCAN1_MCAN_DRV_SetTDCOffset -Enables/Disables the Transceiver Delay Compensation feature and sets the Transceiver Delay 
                Compensation Offset (offset value to be added to the measured transceiver's loop delay in order to define the 
                position of the delayed comparison point when bit rate switching is active).
   - MCAN1_MCAN_DRV_GetBitrate -Gets the MCAN bit rate for standard frames or the arbitration phase of FD frames.
   - MCAN1_MCAN_DRV_GetBitrateFD -Gets the MCAN bit rate for the data phase of FD frames (BRS enabled).

Module "HSD_SPIB"  (component dspi)
   - HSD_SPIB_DSPI_MasterSetDelay -Configures the DSPI master mode bus timing delay options.
   - HSD_SPIB_DSPI_GetDefaultMasterCfg -This function returns a default configuration for DSPI module in SPI master mode.
   - HSD_SPIB_DSPI_MasterInit -Initializes a DSPI instance for master mode operation.
   - HSD_SPIB_DSPI_MasterTransfer -Performs an non-blocking SPI master mode transfer.
   - HSD_SPIB_DSPI_MasterTransferBlocking -Performs an blocking SPI master mode transfer.
   - HSD_SPIB_DSPI_AbortTransfer -Terminates an asynchronous transfer early.
   - HSD_SPIB_DSPI_UpdateCS -Change the chip select used by DSPI driver.
   - HSD_SPIB_DSPI_GetDefaultSlaveCfg -This function returns a default configuration for DSPI module in SPI slave mode.
   - HSD_SPIB_DSPI_SlaveInit -Initializes a DSPI instance for slave mode operation.
   - HSD_SPIB_DSPI_SlaveTransfer -Performs an non-blocking SPI slave mode transfer.
   - HSD_SPIB_DSPI_SlaveTransferBlocking -Performs an blocking SPI slave mode transfer.
   - HSD_SPIB_DSPI_Deinit -Shuts down a DSPI instance.
   - HSD_SPIB_DSPI_GetTransferStatus -Get the current transfer status.

Module "debugUARTC" (component uart_pal)
   - debugUARTC_UART_GetDefaultConfig -Gets the default configuration structure.
   - debugUARTC_UART_Init -Initializes the uart module.
   - debugUARTC_UART_Deinit -De-initializes the uart module.
   - debugUARTC_UART_SetBaudRate -Configures the UART baud rate.
   - debugUARTC_UART_GetBaudRate -Returns the UART baud rate.
   - debugUARTC_UART_SendDataBlocking -Perform a blocking UART transmission.
   - debugUARTC_UART_SendData -Perform a non-blocking UART transmission.
   - debugUARTC_UART_AbortSendingData -Terminates a non-blocking transmission early.
   - debugUARTC_UART_GetTransmitStatus -Get the status of the current non-blocking UART transmission.
   - debugUARTC_UART_ReceiveDataBlocking -Perform a blocking UART reception.
   - debugUARTC_UART_ReceiveData -Perform a non-blocking UART reception.
   - debugUARTC_UART_AbortReceivingData -Terminates a non-blocking reception early.
   - debugUARTC_UART_GetReceiveStatus -Get the status of the current non-blocking UART reception.
   - debugUARTC_UART_SetRxBuffer -Provide a buffer for receiving data.
   - debugUARTC_UART_SetTxBuffer -Provide a buffer for transmitting data.

Module "LSD_SPIC"  (component dspi)
   - LSD_SPIC_DSPI_MasterSetDelay -Configures the DSPI master mode bus timing delay options.
   - LSD_SPIC_DSPI_GetDefaultMasterCfg -This function returns a default configuration for DSPI module in SPI master mode.
   - LSD_SPIC_DSPI_MasterInit -Initializes a DSPI instance for master mode operation.
   - LSD_SPIC_DSPI_MasterTransfer -Performs an non-blocking SPI master mode transfer.
   - LSD_SPIC_DSPI_MasterTransferBlocking -Performs an blocking SPI master mode transfer.
   - LSD_SPIC_DSPI_AbortTransfer -Terminates an asynchronous transfer early.
   - LSD_SPIC_DSPI_UpdateCS -Change the chip select used by DSPI driver.
   - LSD_SPIC_DSPI_GetDefaultSlaveCfg -This function returns a default configuration for DSPI module in SPI slave mode.
   - LSD_SPIC_DSPI_SlaveInit -Initializes a DSPI instance for slave mode operation.
   - LSD_SPIC_DSPI_SlaveTransfer -Performs an non-blocking SPI slave mode transfer.
   - LSD_SPIC_DSPI_SlaveTransferBlocking -Performs an blocking SPI slave mode transfer.
   - LSD_SPIC_DSPI_Deinit -Shuts down a DSPI instance.
   - LSD_SPIC_DSPI_GetTransferStatus -Get the current transfer status.

Module "PWM_PAL0"  (component pwm_pal)
   - PWM_PAL0_PWM_Init -Initialize PWM channels based on config parameter.
   - PWM_PAL0_PWM_UpdateDuty -Update duty cycle. The measurement unit for duty is clock ticks.
   - PWM_PAL0_PWM_UpdatePeriod -Update period for specific a specific channel. This function changes period for all channels 
                which shares the timebase with targeted channel.
   - PWM_PAL0_PWM_OverwriteOutputChannels -This function change the output value for some channels. channelsMask select which 
                channels will be overwrite, each bit filed representing one channel: 1 - channel is controlled by 
                channelsValues, 0 - channel is controlled by pwm. channelsValues select output values to be write on 
                corresponding channel.
   - PWM_PAL0_PWM_Deinit -Uninitialised PWM instance.

Module "Cpu"       (component MPC5775B_416)
   - Cpu_SystemInit -This method configures the oscillator (PLL) that is part of the microcontroller device. SystemInit is 
                called from startup_device file.
   - Cpu_SystemCoreClockUpdate -SystemCoreClockUpdate evaluates the clock register settings and calculates the current core 
                clock.
   - Cpu_SystemSoftwareReset -This method initiates a software rest of the microcontroller.

===================================================================================
